name: Terraform CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'env/dev/**'
      - 'modules/**'
      - '.github/workflows/terraform-eks-workflow.yaml'
      - '!**/*.md'
      - '!**/README.md'
      - '!.idea/**'
      - '!.terraform/**'
  pull_request:
    paths:
      - 'env/dev/**'
      - 'modules/**'
      - '.github/workflows/terraform-eks-workflow.yaml'
      - '!**/*.md'
      - '!**/README.md'
      - '!.idea/**'
      - '!.terraform/**'

jobs:
  check_files:
    runs-on: ubuntu-latest
    outputs:
      run_workflow: ${{ steps.check.outputs.run_workflow }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check modified files
        id: check
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -qvE '(^|/)README\.md$|\.md$|^docs/'; then
            echo "run_workflow=true" >> $GITHUB_OUTPUT
          else
            echo "run_workflow=false" >> $GITHUB_OUTPUT
          fi

  terraform:
    needs: check_files
    if: needs.check_files.outputs.run_workflow == 'true'
    name: Terraform
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      # Assume Role with OIDC
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::966476688056:role/github-actions-oidc
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Navigate to dev environment
        working-directory: ./env/dev
        run: echo "Navigated to env/dev"

      # Terraform Format and Style 검사
      - name: Terraform Format and Style
        id: fmt
        working-directory: ./env/dev
        run: terraform fmt
        continue-on-error: true

      - name: Terraform Init
        id: init
        working-directory: ./env/dev
        run: terraform init -no-color

      - name: Terraform Validate
        id: validate
        working-directory: ./env/dev
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ./env/dev
        #  plan은 terraform.tfvars 파일을 참조하여 실행
        run: terraform plan -var-file=terraform.tfvars -out=plan.tfplan -no-color -lock=false

      - name: Create GitHub Comment
        id: create_comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.PAT_TOKEN_TERRAFORM }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            
            </details>
            
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        # main으로 병합시 apply
        if: github.ref == 'refs/heads/main'
        working-directory: ./env/dev
        run: terraform apply -auto-approve -no-color -lock=false plan.tfplan
